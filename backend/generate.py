import pickle
import numpy as np
from music21 import instrument, note, chord, stream
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM, Activation
import os

def generate():
    """ Generate a new piece of music using the trained model """
    # Load the notes used to train the model
    notes_path = os.path.join('model', 'notes')
    with open(notes_path, 'rb') as filepath:
        notes = pickle.load(filepath)

    # Use the same slice of data as in the training script to ensure
    # the vocabulary size matches the model's trained weights.
    notes = notes[:20000]

    # Get all unique pitch names
    pitchnames = sorted(list(set(notes)))
    # Get the number of unique pitches
    n_vocab = len(set(notes))

    # Prepare sequences for generation
    network_input, normalized_input = prepare_sequences(notes, pitchnames, n_vocab)
    
    # Create the model structure and load the trained weights
    model = create_network(normalized_input, n_vocab)
    weights_path = os.path.join('model', 'weights-best-fast.keras')
    model.load_weights(weights_path)

    print("--- Generating new music ---")
    
    # Generate new notes
    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab)
    
    # Create a MIDI file from the generated notes
    create_midi(prediction_output)

def prepare_sequences(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])

    n_patterns = len(network_input)
    normalized_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def create_network(network_in, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        256,
        input_shape=(network_in.shape[1], network_in.shape[2]),
        recurrent_dropout=0.2,
        return_sequences=True
    ))
    model.add(LSTM(256, return_sequences=True, recurrent_dropout=0.2))
    model.add(LSTM(256))
    model.add(Dense(128))
    model.add(Dropout(0.2))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
    return model

def generate_notes(model, network_input, pitchnames, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(500):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                # --- FIX ---
                # Changed from new_note.stored.instrument to new_note.instrument
                new_note.instrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            # --- FIX ---
            # Changed from new_note.stored.instrument to new_note.instrument
            new_note.instrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    # Create the generated_music directory if it doesn't exist
    output_dir = 'generated_music'
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    output_path = os.path.join(output_dir, 'output.mid')
    midi_stream.write('midi', fp=output_path)
    print(f"Successfully created MIDI file: {output_path}")

if __name__ == '__main__':
    generate()
